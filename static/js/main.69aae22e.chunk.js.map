{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["snake","snakeDots","map","dot","index","style","top","left","key","className","Food","food","App","getRandomFoodCord","Math","floor","random","InitObject","direction","speed","useState","states","setStates","gameOver","alert","length","checkForFood","head","addSnakeDot","unshift","prevState","useEffect","window","addEventListener","onKeyDown","removeEventListener","interval","setTimeout","dots","push","shift","moveSnake","newSnake","checkIfOutOFBounds","pop","forEach","checkIfHittedItself","clearTimeout","e","code","Snake","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69aae22e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst snake = ({ snakeDots }) => {\r\n    return (\r\n        <div>\r\n            {snakeDots.map((dot, index) => {\r\n                const style = {\r\n                    top: `${dot[0]}%`,\r\n                    left: `${dot[1]}%`,\r\n                };\r\n                return (\r\n                    <div key={index} className={'snake-dot'} style={style} />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nsnake.propTypes = {\r\n    snakeDots: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default snake;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Food = ({ food }) => {\r\n    const style = {\r\n        top: `${food[0]}%`,\r\n        left: `${food[1]}%`,\r\n    };\r\n    return <div style={style} className='food' />;\r\n};\r\n\r\nFood.propTypes = {\r\n    food: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Food;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Snake from './Snake';\nimport Food from './Food';\n\nfunction App() {\n    const getRandomFoodCord = () => {\n        let top = 0;\n        let left = 0;\n        let min = 1;\n        let max = 99;\n\n        top = Math.floor((Math.random() * max + min) / 2) * 2;\n        left = Math.floor((Math.random() * max + min) / 2) * 2;\n\n        return [top, left];\n    };\n\n    const InitObject = {\n        snakeDots: [\n            [0, 0],\n            [0, 2],\n        ],\n        food: getRandomFoodCord(),\n        direction: 'RIGHT',\n        speed: 150,\n    };\n\n    const [states, setStates] = useState(InitObject);\n\n    const moveSnake = () => {\n        let dots = [...states.snakeDots];\n        let head = dots[dots.length - 1];\n        switch (states.direction) {\n            case 'UP':\n                head = [head[0] - 2, head[1]];\n                break;\n            case 'DOWN':\n                head = [head[0] + 2, head[1]];\n                break;\n            case 'LEFT':\n                head = [head[0], head[1] - 2];\n                break;\n            case 'RIGHT':\n                head = [head[0], head[1] + 2];\n                break;\n            default:\n                break;\n        }\n        dots.push(head);\n        dots.shift();\n        setStates((prevState) => ({\n            ...prevState,\n            snakeDots: dots,\n        }));\n    };\n\n    const checkIfHittedItself = (snake, head) => {\n        snake.pop();\n        snake.forEach((dot) => {\n            if (head[0] === dot[0] && head[1] === dot[1]) {\n                gameOver();\n            }\n        });\n    };\n\n    const gameOver = () => {\n        alert(`You lost your score ${states.snakeDots.length}`);\n        setStates(InitObject);\n    };\n\n    const checkIfOutOFBounds = (head) => {\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            gameOver();\n        }\n    };\n\n    const inreaseSpeed = () => {\n        if (states.speed >= 10) {\n            states.speed -= 5;\n        }\n    };\n\n    const checkForFood = (head) => {\n        if (head[0] === states.food[0] && head[1] === states.food[1]) {\n            addSnakeDot();\n            states.food = getRandomFoodCord();\n            inreaseSpeed();\n        }\n    };\n\n    const addSnakeDot = () => {\n        let snake = [...states.snakeDots];\n        snake.unshift([]);\n        setStates((prevState) => ({\n            ...prevState,\n            snakeDots: snake,\n        }));\n    };\n\n    //ComponentDidMount\n    useEffect(() => {\n        window.addEventListener('keyup', onKeyDown);\n\n        return () => {\n            window.removeEventListener('keyup', onKeyDown);\n        };\n    }, []);\n\n    //For movement\n    useEffect(() => {\n        //SetMoveInterval\n        const interval = setTimeout(() => {\n            moveSnake();\n        }, states.speed);\n\n        let newSnake = [...states.snakeDots];\n        let head = newSnake[newSnake.length - 1];\n\n        //Check for loose conditions\n        checkIfOutOFBounds(head);\n        checkIfHittedItself(newSnake, head);\n\n        // //Check for food\n        checkForFood(head);\n        return () => clearTimeout(interval);\n    });\n\n    const onKeyDown = (e) => {\n        switch (e.code) {\n            case 'ArrowUp':\n            case 'KeyW':\n                setStates((prevState) => ({\n                    ...prevState,\n                    direction: 'UP',\n                }));\n                break;\n            case 'ArrowDown':\n            case 'KeyS':\n                setStates((prevState) => ({\n                    ...prevState,\n                    direction: 'DOWN',\n                }));\n                break;\n            case 'ArrowLeft':\n            case 'KeyA':\n                setStates((prevState) => ({\n                    ...prevState,\n                    direction: 'LEFT',\n                }));\n                break;\n            case 'ArrowRight':\n            case 'KeyD':\n                setStates((prevState) => ({\n                    ...prevState,\n                    direction: 'RIGHT',\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    return (\n        <div className='App'>\n            <div className='game-container'>\n                <Snake snakeDots={states.snakeDots} />\n                <Food food={states.food} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}